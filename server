library(shiny)
library(edf)
library(edfReader)
library(ggplot2)
library(rio)
library(dplyr)
library(stringr)
library(ggpubr)
library(tidyr)
library(data.table)
library(hms)

#download patients details
URL <- 'http://physionet.org/files/ucddb/1.0.0/SubjectDetails.xls?download'
details <- rio::import(URL)

#cleaning data 'details'
details <- details %>% select(1,4,5,6,8,9,11)
colnames(details)[2]  <- "Weight"
colnames(details)[4] <- "sleep_start"


hours <- floor(details$`Study Duration (hr)`) #round to nearest smaller integer
minutes <- rep(0,25)
for (i in 1:25){
    minutes[i] <- (details$`Study Duration (hr)`[i] - hours[i])*60
}


#changing information
for (i in 1:25){
    if (details$Gender[i]=='F'){
        details$Gender[i] = 'Female'
    } else{
        details$Gender[i] = 'Male'
    }
}

for (i in 1:25){
    if (details$BMI[i] > 30){
        details$Obesity[i] = 'True'
    }else{
        details$Obesity[i] = 'False'
    }
}

Gen <- ggplot(details, aes(x = Gender)) + geom_bar(fill = c("violetred3", "steelblue")) + theme_bw()
BMI <- ggplot(details, aes(x = BMI, fill = Obesity)) + geom_bar() + theme_bw() + scale_fill_manual(values=c("seagreen4", "tomato3"))
AGE <- ggplot(details, aes(x = Age)) + geom_bar() + theme_bw() 
Weight <- ggplot(details, aes(x = Weight)) + geom_bar(width = .5) + theme_bw()

#creating patients
file_name <- rep(0,25)
j <- c(1:28)
k <- c(1,4,16)
m <- setdiff(j,k)

remove(j,k)

for (i in 1:7){
    file_name[i] <- paste("ucddb", m[i], sep="00")
}
for (i in 8:25){
    file_name[i] <- paste("ucddb", m[i], sep="0")
}

remove(m, i)

links <-rep('https://physionet.org/files/ucddb/1.0.0/',25)
lifecards <- rep('https://physionet.org/files/ucddb/1.0.0/',25)
for (i in 1:25){
    lifecards[i] <- paste(lifecards[i], file_name[i], ".rec?download", sep = "")
    links[i] <- paste(links[i], file_name[i],"_respevt.txt?download", sep = "")
}

remove(file_name, i)

#functions 
convert_to_midn<- function(time) {
    ile_23 <- (str_split(toString(time), ":", simplify = TRUE))
    hh <- as.numeric(ile_23[1,1])
    mm <- as.numeric(ile_23[1,2])
    ss <- as.numeric(ile_23[1,3])
    
    if (hh == 23){
        sec = 60-ss
        min = 60-(mm+1)
        till_midnight = -(sec+min*60)
    }
    else if (hh == 22){
        sec = 60-ss
        min = 60-(mm+1)
        till_midnight = -(sec+min*60+3600)
    }
    else{
        till_midnight = ss+mm*60+hh*3600
    }
    return(till_midnight)
}


time_apn <- function(start, problem){
    badanie <- convert_to_midn(start)
    wypadek <- convert_to_midn(problem)
    
    sek_badania <- wypadek - badanie
    return(sek_badania)
}

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
    
    output$distPlot <- renderPlot({

        # generate bins based on input$bins from ui.R
        ggarrange(Gen, BMI, AGE, Weight, 
                  labels = c("A", "B", "C", "D"),
                  ncol = 2, nrow = 2)
    })
    
    output$histext<- renderText({
        
        as.character("Histograms presentic basic information about patients \nparticipating in the study")
    })
    
    output$legend <- renderText({
        as.character("Firgst graph is presenting the ECG waveform, \nthe second one is presenting the flow. \nIf a data is on a yellow background - apnea occured \nIf the background is blue - hypopnea occured")
    })
    

    chosen <- reactive(as.numeric(input$patient))

    output$time_range <- renderText({
        paste("This person slept for ",as.character(hours[chosen()]),"hours and about ",as.character(minutes[chosen()]), "minutes")
    })
    
    patient1 <- reactive(read.edf(lifecards[chosen()]))
    
    output$wykresy_ekg_flow <- renderPlot({
        #view time
        patient <- patient1()
        dana <- data.table::fread(links[chosen()], sep="auto", header=TRUE, skip=2, fill=TRUE)
        dana <- dana[,c(1,2,3)]
        names(dana)[3] <- "Duration"
        if_apnea <- which(grepl("APN",dana$Type))
        if_hypopnea <- which(grepl("HYP",dana$Type))
        apnea <- dana[if_apnea]
        hyp <- dana[if_hypopnea]

        for (i in 1:nrow(apnea)){
            apnea[i,1] <- time_apn(details$sleep_start[chosen()],apnea[i,1])
            apnea[i,1] <- as.numeric(apnea[i,1])*128 #128 tickcs per second
        }
        
        for (i in 1:nrow(hyp)){
            hyp[i,1] <- time_apn(details$sleep_start[chosen()],hyp[i,1])
            hyp[i,1] <- as.numeric(hyp[i,1])*128 #128 tickcs per second
        }

        apnea_view <- apnea
        apnea_view$Time <- hms(as.numeric(apnea_view$Time)/128)
        hyp_view <- hyp
        hyp_view$Time <- hms(as.numeric(hyp_view$Time)/128)
        apnea_view <- as.data.frame(apnea_view)
        hyp_view <- as.data.frame(hyp_view)

        start_ecg <- (input$hours*3600 + input$minutes*60)*128
        start_flow <- start_ecg/16 #16 times less ticks
        seconds <- 30
        stop_ecg <- start_ecg+(128*seconds) #sampling -> 128 ticks per second
        stop_flow <- start_flow+(8*seconds) #sampling -> 8 ticks per second

        start <- (start_ecg/128)
        stop <- (stop_ecg/128)
        time_axis <-seq(start,stop,5)
        time_axis2 <- as.character(hms(time_axis))
        time_axis_ecg <- time_axis*128
        time_axis_flow <- time_axis*8

        #creating a plot

        ECG_signal <- patient$signal$ECG$data[start_ecg:stop_ecg]
        Flow_signal <- patient$signal$Flow$data[start_flow:stop_flow]
        time_ecg = c(start_ecg:stop_ecg)
        time_flow = c(start_flow:stop_flow)

        duration_ap <- rep(NA, nrow(apnea))
        duration_hyp <- rep(NA, nrow(hyp))

        for (i in 1:nrow(apnea)){
            duration_ap[i] <- as.numeric(apnea[i,3])
        }
        for (i in 1:nrow(hyp)){
            duration_hyp[i] <- as.numeric(hyp[i,3])
        }

        remove(i)

        par(mar = rep(2, 4), mfrow=c(2,1))
        plot (time_ecg, ECG_signal, type ='l', xaxt='n')
        axis(1,at = time_axis_ecg[1:7],labels = time_axis2[1:7])
        for (i in 1:nrow(apnea)){
            polygon(x=c(as.numeric(apnea[i,1]),as.numeric(apnea[i,1]),(as.numeric(apnea[i,1])+duration_ap[i]*128),(as.numeric(apnea[i,1])+duration_ap[i]*128)), y=c(-10,10,10,-10), col="#FF990022", border=F)
        }
        for (i in 1:nrow(hyp)){
            polygon(x=c(as.numeric(hyp[i,1]),as.numeric(hyp[i,1]),(as.numeric(hyp[i,1])+duration_hyp[i]*128),(as.numeric(hyp[i,1])+duration_hyp[i]*128)), y=c(-10,10,10,-10), col="#0000FF22", border=F)
        }

        plot(time_flow, Flow_signal, type ='l', ylim = c(-30,30), xaxt='n')
        axis(1,at = time_axis_flow[1:7],labels = time_axis2[1:7])
        for (i in 1:nrow(apnea)){
            polygon(x=c((as.numeric(apnea[i,1]))/16,(as.numeric(apnea[i,1]))/16,(as.numeric(apnea[i,1])/16+duration_ap[i]*8),(as.numeric(apnea[i,1])/16+duration_ap[i]*8)), y=c(-50,50,50,-50), col="#FF990022", border=F)
        }
        for (i in 1:nrow(hyp)){
            polygon(x=c((as.numeric(hyp[i,1]))/16,(as.numeric(hyp[i,1]))/16,(as.numeric(hyp[i,1])/16+duration_hyp[i]*8),(as.numeric(hyp[i,1])/16+duration_hyp[i]*8)), y=c(-50,50,50,-50), col="#0000FF22", border=F)
        }
        
        output$apnea_time <- renderPrint({
            apnea_view
        })
        
        output$hypo_time <- renderPrint({
            hyp_view
        })
    })
    

    output$boxes <- renderPlot({
        dana <- data.table::fread(links[chosen()], sep="auto", header=TRUE, skip=2, fill=TRUE)
        dana <- dana[,c(1,2,3)]
        names(dana)[3] <- "Duration"
        if_apnea <- which(grepl("APN",dana$Type))
        if_hypopnea <- which(grepl("HYP",dana$Type))
        apnea <- dana[if_apnea]
        hyp <- dana[if_hypopnea]

        x1 <- apnea[,3]
        x1$Value <- "Apnea"
        x2 <- hyp[,3]
        x2$Value <- "Hypopnea"
        
        box_data <- bind_rows(x1,x2)
        
        remove(x1,x2)
        ggplot(box_data, aes(x=Value, y = Duration)) + geom_boxplot()
        
    })

})
